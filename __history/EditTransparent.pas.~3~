unit EditTransparent;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, System.Types,
  FMX.Objects, System.UITypes, FMX.Graphics, FMX.Dialogs, System.Math,
  System.Math.Vectors, FMX.Edit, FMX.Layouts, FMX.Effects;

type
  TTransparentEdit = class(TControl)
  private
    { Private declarations }
    FBackground: TRectangle;
    FEdit: TEdit;
    FIcon: TPath;
    FLayoutIcon: TLayout;
    FShadow: TShadowEffect;
    FStrokeGradientDefocus: TGradient;

    { Edit settings }
    FText: String;
    FTextPrompt: String;

    { Icon settings }
    FIconData: TPathData;
    FIconSize: Single;

    { Events settings }
    procedure SetFOnTyping(const Value: TNotifyEvent);
    function GetFText: String;
    procedure SetFText(const Value: String);
    function GetFOnTyping: TNotifyEvent;
    function GetFTextPrompt: String;
    procedure SetFTextPrompt(const Value: String);
    function GetFPassword: Boolean;
    procedure SetFPassword(const Value: Boolean);
    function GetFOnClick: TNotifyEvent;
    procedure SetFOnClick(const Value: TNotifyEvent);
    function GetFOnDblClick: TNotifyEvent;
    procedure SetFOnDblClick(const Value: TNotifyEvent);
  protected
    { Protected declarations }
    procedure Paint; override;
    procedure Resize; override;
    procedure Painting; override;

    { Repaint }
    procedure DoChanged(Sender: TObject);
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property ClipParent;
    property Cursor;
    property Enabled;
    property Height;
    property HitTest default True;
    property Opacity;
    property Margins;
    property Position;
    property RotationAngle;
    property RotationCenter;
    property Scale;
    property Size;
    property Visible;
    property Width;

    { Additional properties }
    property Text: String read GetFText write SetFText;
    property TextPrompt: String read GetFTextPrompt write SetFTextPrompt;
    property Password: Boolean read GetFPassword write SetFPassword;
    property IconData: TPathData read FIconData write FIconData;
    property IconSize: Single read FIconSize write FIconSize;

    { Optional properties - Rarely used }
    // property CanFocus default True;
    // property DragMode;
    // property EnableDragHighlight;
    // property Locked;
    // property Padding;
    // property PopupMenu;
    // property TouchTargetExpansion;
    // property TabOrder default -1;
    // property TabStop default True;

    { Events }
    property OnPainting;
    property OnPaint;
    property OnResize;
    { Mouse events }
    property OnClick: TNotifyEvent read GetFOnClick write SetFOnClick;
    property OnDblClick: TNotifyEvent read GetFOnDblClick write SetFOnDblClick;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnMouseWheel;
    property OnMouseEnter;
    property OnMouseLeave;

    { Additional events }
    property OnTyping: TNotifyEvent read GetFOnTyping write SetFOnTyping;

    { Optional events - Rarely used }
    // property OnDragEnter;
    // property OnDragLeave;
    // property OnDragOver;
    // property OnDragDrop;
    // property OnDragEnd;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Componentes Customizados', [TTransparentEdit]);
end;

end.
