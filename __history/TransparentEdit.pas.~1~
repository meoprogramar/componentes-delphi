unit EditTransparent;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, System.Types,
  FMX.Objects, System.UITypes, FMX.Graphics, FMX.Dialogs, System.Math,
  System.Math.Vectors, FMX.Edit, FMX.Layouts, FMX.Effects;

type
  TTransparentEdit = class(TControl)
  private
    { Private declarations }
    FBackground: TRectangle;
    FEdit: TEdit;
    FIcon: TPath;
    FLayoutIcon: TLayout;
    FDark: Boolean;

    { Icon settings }
    FIconData: TPathData;
    FIconSize: Single;
    FIconRight: Boolean;

    { Events settings }
    procedure SetFOnTyping(const Value: TNotifyEvent);
    function GetFText: String;
    procedure SetFText(const Value: String);
    function GetFOnTyping: TNotifyEvent;
    function GetFTextPrompt: String;
    procedure SetFTextPrompt(const Value: String);
    function GetFPassword: Boolean;
    procedure SetFPassword(const Value: Boolean);
    function GetFOnClick: TNotifyEvent;
    procedure SetFOnClick(const Value: TNotifyEvent);
    function GetFOnDblClick: TNotifyEvent;
    procedure SetFOnDblClick(const Value: TNotifyEvent);
  protected
    { Protected declarations }
    procedure Paint; override;
    procedure Resize; override;
    procedure Painting; override;

    { Repaint }
    procedure DoChanged(Sender: TObject);
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property ClipParent;
    property Cursor;
    property Enabled;
    property Height;
    property HitTest default True;
    property Opacity;
    property Margins;
    property Position;
    property RotationAngle;
    property RotationCenter;
    property Scale;
    property Size;
    property Visible;
    property Width;

    { Additional properties }
    property Text: String read GetFText write SetFText;
    property TextPrompt: String read GetFTextPrompt write SetFTextPrompt;
    property Password: Boolean read GetFPassword write SetFPassword;
    property IconData: TPathData read FIconData write FIconData;
    property IconSize: Single read FIconSize write FIconSize;
    property IconRight: Boolean read FIconRight write FIconRight;
    property Dark: Boolean read FDark write FDark;

    { Optional properties - Rarely used }
    // property CanFocus default True;
    // property DragMode;
    // property EnableDragHighlight;
    // property Locked;
    // property Padding;
    // property PopupMenu;
    // property TouchTargetExpansion;
    // property TabOrder default -1;
    // property TabStop default True;

    { Events }
    property OnPainting;
    property OnPaint;
    property OnResize;
    { Mouse events }
    property OnClick: TNotifyEvent read GetFOnClick write SetFOnClick;
    property OnDblClick: TNotifyEvent read GetFOnDblClick write SetFOnDblClick;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnMouseWheel;
    property OnMouseEnter;
    property OnMouseLeave;

    { Additional events }
    property OnTyping: TNotifyEvent read GetFOnTyping write SetFOnTyping;

    { Optional events - Rarely used }
    // property OnDragEnter;
    // property OnDragLeave;
    // property OnDragOver;
    // property OnDragDrop;
    // property OnDragEnd;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Componentes Customizados', [TTransparentEdit]);
end;

{ Tbuttonfinal }

{ Private declarations }

{ Events settings }

procedure TTransparentEdit.SetFOnClick(const Value: TNotifyEvent);
begin
  FEdit.OnClick := Value;
end;

function TTransparentEdit.GetFOnClick: TNotifyEvent;
begin
  result := FEdit.OnClick;
end;

procedure TTransparentEdit.SetFOnDblClick(const Value: TNotifyEvent);
begin
  FEdit.OnDblClick := Value;
end;

function TTransparentEdit.GetFOnDblClick: TNotifyEvent;
begin
  result := FEdit.OnDblClick;
end;

procedure TTransparentEdit.SetFOnTyping(const Value: TNotifyEvent);
begin
  FEdit.OnTyping := Value;
end;

function TTransparentEdit.GetFOnTyping: TNotifyEvent;
begin
  result := FEdit.OnTyping;
end;

procedure TTransparentEdit.SetFText(const Value: String);
begin
  FEdit.Text := Value;
end;

function TTransparentEdit.GetFText: String;
begin
  result := FEdit.Text;
end;

procedure TTransparentEdit.SetFTextPrompt(const Value: String);
begin
  FEdit.TextPrompt := Value;
end;

function TTransparentEdit.GetFTextPrompt: String;
begin
  result := FEdit.TextPrompt;
end;

procedure TTransparentEdit.SetFPassword(const Value: Boolean);
begin
  FEdit.Password := Value;
end;

function TTransparentEdit.GetFPassword: Boolean;
begin
  result := FEdit.Password;
end;

{ Protected declarations }

procedure TTransparentEdit.Paint;
begin
  inherited;
  if FIconData.Data.Equals('') then
  begin
    FLayoutIcon.Visible := false;
    FIcon.Visible := false;
  end
  else
  begin
    FLayoutIcon.Visible := True;
    FIcon.Visible := True;
    FLayoutIcon.Width := 13 + FIconSize;
    FIcon.Width := FIconSize;
    FIcon.Data := FIconData;
  end;

  if FDark then
  begin
    FBackground.Fill.Color := TAlphaColor($C82F2F2F);
    FEdit.TextSettings.FontColor := TAlphaColor($FFFFFFFF);
    FIcon.Fill.Color := TAlphaColor($FFFFFFFF);
  end
  else
  begin
    FBackground.Fill.Color := TAlphaColor($C8FFFFFF);
    FEdit.TextSettings.FontColor := TAlphaColor($FF323232);
    FIcon.Fill.Color := TAlphaColor($FF515151);
  end;

  if FIconRight then
  begin
    FLayoutIcon.Align := TAlignLayout.Right;
    FIcon.Align := TAlignLayout.Left;
  end
  else
  begin
    FLayoutIcon.Align := TAlignLayout.Left;
    FIcon.Align := TAlignLayout.Right;
  end;
end;

procedure TTransparentEdit.Resize;
begin
  inherited;
  if Assigned(FBackground) then
  begin
    with FBackground do
    begin
      Height := self.Width * 0.85;
      Width := self.Width * 0.85;
      Position.X := self.Width / 2 - Width / 2;
      Position.Y := self.Height / 2 - Height / 2;
    end;
  end;
end;

procedure TTransparentEdit.Painting;
begin
  inherited;
end;

{ Repaint }

procedure TTransparentEdit.DoChanged(Sender: TObject);
begin
  Repaint;
end;

{ Public declarations }

constructor TTransparentEdit.Create(AOwner: TComponent);
begin
  inherited;
  self.Width := 250;
  self.Height := 40;

  FIconData := TPathData.Create;
  FIconData.OnChanged := DoChanged;
  FIconSize := 12;

  { Backgroud }
  FBackground := TRectangle.Create(self);
  self.AddObject(FBackground);
  FBackground.Align := TAlignLayout.Client;
  FBackground.Stroke.Kind := TBrushKind.None;
  FBackground.Fill.Color := TAlphaColor($C8FFFFFF);
  FBackground.XRadius := 4;
  FBackground.YRadius := 4;
  FBackground.SetSubComponent(True);
  FBackground.Stored := false;

  { Edit }
  FEdit := TEdit.Create(self);
  FEdit.Parent := FBackground;
  FEdit.Align := TAlignLayout.Client;
  FEdit.Margins.Top := 5;
  FEdit.Margins.Bottom := 5;
  FEdit.Margins.Left := 8;
  FEdit.Margins.Right := 8;
  FEdit.StyleLookup := 'transparentedit';
  FEdit.TextPrompt := 'TextPrompt';
  FEdit.StyledSettings := [];
  FEdit.TextSettings.Font.Size := 14;
  FEdit.TextSettings.Font.Family := 'SF Pro Display';
  FEdit.TextSettings.FontColor := TAlphaColor($FF323232);
  FEdit.SetSubComponent(True);
  FEdit.Stored := false;

  { Icon }
  FLayoutIcon := TLayout.Create(self);
  FBackground.AddObject(FLayoutIcon);
  FLayoutIcon.Align := TAlignLayout.Left;
  FLayoutIcon.Width := 25;

  FIcon := TPath.Create(self);
  FLayoutIcon.AddObject(FIcon);
  FIcon.Align := TAlignLayout.Right;
  FIcon.WrapMode := TPathWrapMode.Fit;
  FIcon.Fill.Color := TAlphaColor($FF515151);
  FIcon.Stroke.Kind := TBrushKind.None;
  FIcon.Width := FIconSize;
end;

destructor TTransparentEdit.Destroy;
begin
  if Assigned(FIconData) then
    FIconData.Free;
  if Assigned(FIcon) then
    FIcon.Free;
  if Assigned(FLayoutIcon) then
    FLayoutIcon.Free;
  if Assigned(FEdit) then
    FEdit.Free;
  if Assigned(FBackground) then
    FBackground.Free;
  inherited;
end;

end.
