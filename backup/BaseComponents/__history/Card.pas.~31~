unit Card;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, System.Types,
  FMX.Objects, System.UITypes, FMX.Graphics, FMX.Dialogs, System.Math,
  System.Math.Vectors, FMX.Edit, FMX.Layouts, FMX.Effects, SolidInput;

type
  TCard = class(TControl)
  private
    { Private declarations }
  protected
    { Protected declarations }
    FPointerOnClose: TNotifyEvent;
    FPointerOnOpen: TNotifyEvent;

    FBackgroundCard: TRectangle;
    FShadow: TShadowEffect;

    procedure Paint; override;
    procedure Resize; override;
    procedure Painting; override;

    function GetFTag: NativeInt;
    procedure SetFTag(const Value: NativeInt);
    function GetFCorners: TCorners;
    procedure SetFCorners(const Value: TCorners);
    function GetFOnClose: TNotifyEvent;
    function GetFOnOpen: TNotifyEvent;
    procedure SetFOnClose(const Value: TNotifyEvent);
    procedure SetFOnOpen(const Value: TNotifyEvent);
    function GetFCursor: TCursor;
    function GetFElevation: Boolean;
    function GetFElevationColor: TAlphaColor;
    function GetFElevationDirection: Single;
    function GetFElevationDistance: Single;
    function GetFElevationOpacity: Single;
    function GetFElevationSoftness: Single;
    function GetFHitTest: Boolean;
    procedure SetFCursor(const Value: TCursor);
    procedure SetFElevation(const Value: Boolean);
    procedure SetFElevationColor(const Value: TAlphaColor);
    procedure SetFElevationDirection(const Value: Single);
    procedure SetFElevationDistance(const Value: Single);
    procedure SetFElevationOpacity(const Value: Single);
    procedure SetFElevationSoftness(const Value: Single);
    procedure SetFHitTest(const Value: Boolean);
    function GetFBackgroudColor: TBrush;
    procedure SetFBackgroudColor(const Value: TBrush);
    function GetFCornerRound: Single;
    procedure SetFCornerRound(const Value: Single);
    function GetFOnClick: TNotifyEvent;
    function GetFOnDblClick: TNotifyEvent;
    function GetFOnKeyDown: TKeyEvent;
    function GetFOnKeyUp: TKeyEvent;
    function GetFOnMouseDown: TMouseEvent;
    function GetFOnMouseEnter: TNotifyEvent;
    function GetFOnMouseLeave: TNotifyEvent;
    function GetFOnMouseMove: TMouseMoveEvent;
    function GetFOnMouseUp: TMouseEvent;
    function GetFOnMouseWheel: TMouseWheelEvent;
    procedure SetFOnClick(const Value: TNotifyEvent);
    procedure SetFOnDblClick(const Value: TNotifyEvent);
    procedure SetFOnKeyDown(const Value: TKeyEvent);
    procedure SetFOnKeyUp(const Value: TKeyEvent);
    procedure SetFOnMouseDown(const Value: TMouseEvent);
    procedure SetFOnMouseEnter(const Value: TNotifyEvent);
    procedure SetFOnMouseLeave(const Value: TNotifyEvent);
    procedure SetFOnMouseMove(const Value: TMouseMoveEvent);
    procedure SetFOnMouseUp(const Value: TMouseEvent);
    procedure SetFOnMouseWheel(const Value: TMouseWheelEvent);
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Open(Duration: Single = 0.2); virtual;
    procedure Close(Duration: Single = 0.2); virtual;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property Enabled;
    property Height;
    property Opacity;
    property Visible;
    property Width;
    property Size;
    property Scale;
    property Margins;
    property Position;
    property RotationAngle;
    property RotationCenter;

    { Additional properties }
    property Cursor: TCursor read GetFCursor write SetFCursor;
    property HitTest: Boolean read GetFHitTest write SetFHitTest default True;
    property Color: TBrush read GetFBackgroudColor write SetFBackgroudColor;
    property Elevation: Boolean read GetFElevation write SetFElevation;
    property ElevationDistance: Single read GetFElevationDistance write SetFElevationDistance;
    property ElevationDirection: Single read GetFElevationDirection write SetFElevationDirection;
    property ElevationOpacity: Single read GetFElevationOpacity write SetFElevationOpacity;
    property ElevationSoftness: Single read GetFElevationSoftness write SetFElevationSoftness;
    property ElevationColor: TAlphaColor read GetFElevationColor write SetFElevationColor;
    property CornerRound: Single read GetFCornerRound write SetFCornerRound;
    property Corners: TCorners read GetFCorners write SetFCorners;
    property Tag: NativeInt read GetFTag write SetFTag;

    { Events }
    property OnPainting;
    property OnPaint;
    property OnResize;

    { Mouse events }
    property OnClick: TNotifyEvent read GetFOnClick write SetFOnClick;
    property OnDblClick: TNotifyEvent read GetFOnDblClick write SetFOnDblClick;
    property OnKeyDown: TKeyEvent read GetFOnKeyDown write SetFOnKeyDown;
    property OnKeyUp: TKeyEvent read GetFOnKeyUp write SetFOnKeyUp;
    property OnMouseDown: TMouseEvent read GetFOnMouseDown write SetFOnMouseDown;
    property OnMouseUp: TMouseEvent read GetFOnMouseUp write SetFOnMouseUp;
    property OnMouseWheel: TMouseWheelEvent read GetFOnMouseWheel write SetFOnMouseWheel;
    property OnMouseMove: TMouseMoveEvent read GetFOnMouseMove write SetFOnMouseMove;
    property OnMouseEnter: TNotifyEvent read GetFOnMouseEnter write SetFOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read GetFOnMouseLeave write SetFOnMouseLeave;
    property OnClose: TNotifyEvent read GetFOnClose write SetFOnClose;
    property OnOpen: TNotifyEvent read GetFOnOpen write SetFOnOpen;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Componentes Customizados', [TCard]);
end;

{ TCard }

procedure TCard.Open(Duration: Single = 0.2);
begin
  Self.Visible := True;
  Self.Opacity := 0;
  Self.AnimateFloat('Opacity', 1, Duration, TAnimationType.InOut, TInterpolationType.Circular);

  if Assigned(FPointerOnOpen) then
    FPointerOnOpen(Self);
end;

procedure TCard.Close(Duration: Single = 0.2);
begin
  Self.AnimateFloatWait('Opacity', 0, Duration, TAnimationType.InOut, TInterpolationType.Circular);
  Self.Visible := False;
  Self.Opacity := 1;

  if Assigned(FPointerOnClose) then
    FPointerOnClose(Self);
end;

constructor TCard.Create(AOwner: TComponent);
begin
  inherited;
  Self.Width := 300;
  Self.Height := 300;

  { BackgroudCard }
  FBackgroundCard := TRectangle.Create(Self);
  Self.AddObject(FBackgroundCard);
  FBackgroundCard.Align := TAlignLayout.Contents;
  FBackgroundCard.Stroke.Kind := TBrushKind.None;
  FBackgroundCard.Fill.Color := TAlphaColor($FFFFFFFF);
  FBackgroundCard.SetSubComponent(True);
  FBackgroundCard.Stored := False;

  { Shadow }
  FShadow := TShadowEffect.Create(Self);
  FBackgroundCard.AddObject(FShadow);
  FShadow.Direction := 90;
  FShadow.Distance := 7;
  FShadow.Opacity := 0.2;
  FShadow.Softness := 0.3;
  FShadow.Enabled := True;
end;

destructor TCard.Destroy;
begin
  if Assigned(FShadow) then
    FShadow.Free;
  if Assigned(FBackgroundCard) then
    FBackgroundCard.Free;
  inherited;
end;

procedure TCard.Paint;
begin
  inherited;

end;

procedure TCard.Painting;
begin
  inherited;

end;

procedure TCard.Resize;
begin
  inherited;

end;

function TCard.GetFBackgroudColor: TBrush;
begin
  Result := FBackgroundCard.Fill;
end;

function TCard.GetFCornerRound: Single;
begin
  Result := FBackgroundCard.XRadius;
end;

function TCard.GetFCorners: TCorners;
begin
  Result := FBackgroundCard.Corners;
end;

function TCard.GetFCursor: TCursor;
begin
  Result := FBackgroundCard.Cursor;
end;

function TCard.GetFElevation: Boolean;
begin
  Result := FShadow.Enabled;
end;

function TCard.GetFElevationColor: TAlphaColor;
begin
  Result := FShadow.ShadowColor;
end;

function TCard.GetFElevationDirection: Single;
begin
  Result := FShadow.Direction;
end;

function TCard.GetFElevationDistance: Single;
begin
  Result := FShadow.Distance;
end;

function TCard.GetFElevationOpacity: Single;
begin
  Result := FShadow.Opacity;
end;

function TCard.GetFElevationSoftness: Single;
begin
  Result := FShadow.Softness;
end;

function TCard.GetFHitTest: Boolean;
begin
  Result := FBackgroundCard.HitTest;
end;

function TCard.GetFOnClick: TNotifyEvent;
begin
  Result := FBackgroundCard.OnClick;
end;

function TCard.GetFOnClose: TNotifyEvent;
begin
  Result := FPointerOnClose;
end;

function TCard.GetFOnDblClick: TNotifyEvent;
begin
  Result := FBackgroundCard.OnDblClick;
end;

function TCard.GetFOnKeyDown: TKeyEvent;
begin
  Result := FBackgroundCard.OnKeyDown;
end;

function TCard.GetFOnKeyUp: TKeyEvent;
begin
  Result := FBackgroundCard.OnKeyUp;
end;

function TCard.GetFOnMouseDown: TMouseEvent;
begin
  Result := FBackgroundCard.OnMouseDown;
end;

function TCard.GetFOnMouseEnter: TNotifyEvent;
begin
  Result := FBackgroundCard.OnMouseEnter;
end;

function TCard.GetFOnMouseLeave: TNotifyEvent;
begin
  Result := FBackgroundCard.OnMouseLeave;
end;

function TCard.GetFOnMouseMove: TMouseMoveEvent;
begin
  Result := FBackgroundCard.OnMouseMove;
end;

function TCard.GetFOnMouseUp: TMouseEvent;
begin
  Result := FBackgroundCard.OnMouseUp;
end;

function TCard.GetFOnMouseWheel: TMouseWheelEvent;
begin
  Result := FBackgroundCard.OnMouseWheel;
end;

function TCard.GetFOnOpen: TNotifyEvent;
begin
  Result := FPointerOnOpen;
end;

function TCard.GetFTag: NativeInt;
begin
  Result := FBackgroundCard.Tag;
end;

procedure TCard.SetFBackgroudColor(const Value: TBrush);
begin
  FBackgroundCard.Fill := Value;
end;

procedure TCard.SetFCornerRound(const Value: Single);
begin
  FBackgroundCard.XRadius := Value;
  FBackgroundCard.YRadius := Value;
end;

procedure TCard.SetFCorners(const Value: TCorners);
begin
  FBackgroundCard.Corners := Value;
end;

procedure TCard.SetFCursor(const Value: TCursor);
begin
  FBackgroundCard.Cursor := Value;
end;

procedure TCard.SetFElevation(const Value: Boolean);
begin
  FShadow.Enabled := Value;
end;

procedure TCard.SetFElevationColor(const Value: TAlphaColor);
begin
  FShadow.ShadowColor := Value;
end;

procedure TCard.SetFElevationDirection(const Value: Single);
begin
  FShadow.Direction := Value;
end;

procedure TCard.SetFElevationDistance(const Value: Single);
begin
  FShadow.Distance := Value;
end;

procedure TCard.SetFElevationOpacity(const Value: Single);
begin
  FShadow.Opacity := Value;
end;

procedure TCard.SetFElevationSoftness(const Value: Single);
begin
  FShadow.Softness := Value;
end;

procedure TCard.SetFHitTest(const Value: Boolean);
begin
  FBackgroundCard.HitTest := Value;
end;

procedure TCard.SetFOnClick(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnClick := Value;
end;

procedure TCard.SetFOnClose(const Value: TNotifyEvent);
begin
  FPointerOnClose := Value;
end;

procedure TCard.SetFOnDblClick(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnDblClick := Value;
end;

procedure TCard.SetFOnKeyDown(const Value: TKeyEvent);
begin
  FBackgroundCard.OnKeyDown := Value;
end;

procedure TCard.SetFOnKeyUp(const Value: TKeyEvent);
begin
  FBackgroundCard.OnKeyUp := Value;
end;

procedure TCard.SetFOnMouseDown(const Value: TMouseEvent);
begin
  FBackgroundCard.OnMouseDown := Value;
end;

procedure TCard.SetFOnMouseEnter(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnMouseEnter := Value;
end;

procedure TCard.SetFOnMouseLeave(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnMouseLeave := Value;
end;

procedure TCard.SetFOnMouseMove(const Value: TMouseMoveEvent);
begin
  FBackgroundCard.OnMouseMove := Value;
end;

procedure TCard.SetFOnMouseUp(const Value: TMouseEvent);
begin
  FBackgroundCard.OnMouseUp := Value;
end;

procedure TCard.SetFOnMouseWheel(const Value: TMouseWheelEvent);
begin
  FBackgroundCard.OnMouseWheel := Value;
end;

procedure TCard.SetFOnOpen(const Value: TNotifyEvent);
begin
  FPointerOnOpen := Value;
end;

procedure TCard.SetFTag(const Value: NativeInt);
begin
  FBackgroundCard.Tag := Value;
  TControl(Self).Tag := Value;
end;

end.
