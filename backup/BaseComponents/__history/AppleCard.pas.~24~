unit AppleCard;

interface

uses
  System.SysUtils, System.Classes, FMX.Types, FMX.Controls, System.Types,
  FMX.Objects, System.UITypes, FMX.Graphics, FMX.Dialogs, System.Math,
  System.Math.Vectors, FMX.Edit, FMX.Layouts, FMX.Effects, SolidAppleEdit;

type
  TAppleCard = class(TControl)
  private
    function GetFCursor: TCursor;
    function GetFElevation: Boolean;
    function GetFElevationColor: TAlphaColor;
    function GetFElevationDirection: Single;
    function GetFElevationDistance: Single;
    function GetFElevationOpacity: Single;
    function GetFElevationSoftness: Single;
    function GetFHitTest: Boolean;
    procedure SetFCursor(const Value: TCursor);
    procedure SetFElevation(const Value: Boolean);
    procedure SetFElevationColor(const Value: TAlphaColor);
    procedure SetFElevationDirection(const Value: Single);
    procedure SetFElevationDistance(const Value: Single);
    procedure SetFElevationOpacity(const Value: Single);
    procedure SetFElevationSoftness(const Value: Single);
    procedure SetFHitTest(const Value: Boolean);
    function GetFBackgroudColor: TAlphaColor;
    procedure SetFBackgroudColor(const Value: TAlphaColor);
    function GetFCornerRound: Single;
    procedure SetFCornerRound(const Value: Single);
    function GetFOnClick: TNotifyEvent;
    function GetFOnDblClick: TNotifyEvent;
    function GetFOnKeyDown: TKeyEvent;
    function GetFOnKeyUp: TKeyEvent;
    function GetFOnMouseDown: TMouseEvent;
    function GetFOnMouseEnter: TNotifyEvent;
    function GetFOnMouseLeave: TNotifyEvent;
    function GetFOnMouseMove: TMouseMoveEvent;
    function GetFOnMouseUp: TMouseEvent;
    function GetFOnMouseWheel: TMouseWheelEvent;
    procedure SetFOnClick(const Value: TNotifyEvent);
    procedure SetFOnDblClick(const Value: TNotifyEvent);
    procedure SetFOnKeyDown(const Value: TKeyEvent);
    procedure SetFOnKeyUp(const Value: TKeyEvent);
    procedure SetFOnMouseDown(const Value: TMouseEvent);
    procedure SetFOnMouseEnter(const Value: TNotifyEvent);
    procedure SetFOnMouseLeave(const Value: TNotifyEvent);
    procedure SetFOnMouseMove(const Value: TMouseMoveEvent);
    procedure SetFOnMouseUp(const Value: TMouseEvent);
    procedure SetFOnMouseWheel(const Value: TMouseWheelEvent);
    function GetFCorners: Boolean;
    procedure SetFCorners(const Value: Boolean);
    { Private declarations }
  protected
    { Protected declarations }
    FBackgroundCard: TRectangle;
    FShadow: TShadowEffect;
    FCornersActive: Boolean;

    procedure Paint; override;
    procedure Resize; override;
    procedure Painting; override;
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property Enabled;
    property Height;
    property Opacity;
    property Visible;
    property Width;
    property Size;
    property Scale;
    property Margins;
    property Position;
    property RotationAngle;
    property RotationCenter;

    { Additional properties }
    property Cursor: TCursor read GetFCursor write SetFCursor;
    property HitTest: Boolean read GetFHitTest write SetFHitTest default True;
    property Color: TAlphaColor read GetFBackgroudColor write SetFBackgroudColor;
    property Elevation: Boolean read GetFElevation write SetFElevation;
    property ElevationDistance: Single read GetFElevationDistance write SetFElevationDistance;
    property ElevationDirection: Single read GetFElevationDirection write SetFElevationDirection;
    property ElevationOpacity: Single read GetFElevationOpacity write SetFElevationOpacity;
    property ElevationSoftness: Single read GetFElevationSoftness write SetFElevationSoftness;
    property ElevationColor: TAlphaColor read GetFElevationColor write SetFElevationColor;
    property Corners: Boolean read GetFCorners write SetFCorners default True;
    property CornerRound: Single read GetFCornerRound write SetFCornerRound;

    { Events }
    property OnPainting;
    property OnPaint;
    property OnResize;

    { Mouse events }
    property OnClick: TNotifyEvent read GetFOnClick write SetFOnClick;
    property OnDblClick: TNotifyEvent read GetFOnDblClick write SetFOnDblClick;
    property OnKeyDown: TKeyEvent read GetFOnKeyDown write SetFOnKeyDown;
    property OnKeyUp: TKeyEvent read GetFOnKeyUp write SetFOnKeyUp;
    property OnMouseDown: TMouseEvent read GetFOnMouseDown write SetFOnMouseDown;
    property OnMouseUp: TMouseEvent read GetFOnMouseUp write SetFOnMouseUp;
    property OnMouseWheel: TMouseWheelEvent read GetFOnMouseWheel write SetFOnMouseWheel;
    property OnMouseMove: TMouseMoveEvent read GetFOnMouseMove write SetFOnMouseMove;
    property OnMouseEnter: TNotifyEvent read GetFOnMouseEnter write SetFOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read GetFOnMouseLeave write SetFOnMouseLeave;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Componentes Customizados', [TAppleCard]);
end;

{ TAppleCard }

constructor TAppleCard.Create(AOwner: TComponent);
begin
  inherited;
  Self.Width := 300;
  Self.Height := 300;

  { BackgroudCard }
  FBackgroundCard := TRectangle.Create(Self);
  Self.AddObject(FBackgroundCard);
  FBackgroundCard.Align := TAlignLayout.Client;
  FBackgroundCard.Stroke.Kind := TBrushKind.None;
  FBackgroundCard.Fill.Color := TAlphaColor($FFFFFFFF);
  FBackgroundCard.XRadius := 5;
  FBackgroundCard.YRadius := 5;
  FBackgroundCard.SetSubComponent(True);
  FBackgroundCard.Stored := False;

  { Shadow }
  FShadow := TShadowEffect.Create(Self);
  FBackgroundCard.AddObject(FShadow);
  FShadow.Direction := 90;
  FShadow.Distance := 7;
  FShadow.Opacity := 0.2;
  FShadow.Softness := 0.3;
  FShadow.Enabled := True;
end;

destructor TAppleCard.Destroy;
begin
  if Assigned(FShadow) then
    FShadow.Free;
  if Assigned(FBackgroundCard) then
    FBackgroundCard.Free;
  inherited;
end;

procedure TAppleCard.Paint;
begin
  inherited;

end;

procedure TAppleCard.Painting;
begin
  inherited;

end;

procedure TAppleCard.Resize;
begin
  inherited;

end;

function TAppleCard.GetFBackgroudColor: TAlphaColor;
begin
  Result := FBackgroundCard.Fill.Color;
end;

function TAppleCard.GetFCornerRound: Single;
begin
  Result := FBackgroundCard.XRadius;
end;

function TAppleCard.GetFCorners: Boolean;
begin
  Result := FCornersActive;
end;

function TAppleCard.GetFCursor: TCursor;
begin
  Result := FBackgroundCard.Cursor;
end;

function TAppleCard.GetFElevation: Boolean;
begin
  Result := FShadow.Enabled;
end;

function TAppleCard.GetFElevationColor: TAlphaColor;
begin
  Result := FShadow.ShadowColor;
end;

function TAppleCard.GetFElevationDirection: Single;
begin
  Result := FShadow.Direction;
end;

function TAppleCard.GetFElevationDistance: Single;
begin
  Result := FShadow.Distance;
end;

function TAppleCard.GetFElevationOpacity: Single;
begin
  Result := FShadow.Opacity;
end;

function TAppleCard.GetFElevationSoftness: Single;
begin
  Result := FShadow.Softness;
end;

function TAppleCard.GetFHitTest: Boolean;
begin
  Result := FBackgroundCard.HitTest;
end;

function TAppleCard.GetFOnClick: TNotifyEvent;
begin
  Result := FBackgroundCard.OnClick;
end;

function TAppleCard.GetFOnDblClick: TNotifyEvent;
begin
  Result := FBackgroundCard.OnDblClick;
end;

function TAppleCard.GetFOnKeyDown: TKeyEvent;
begin
  Result := FBackgroundCard.OnKeyDown;
end;

function TAppleCard.GetFOnKeyUp: TKeyEvent;
begin
  Result := FBackgroundCard.OnKeyUp;
end;

function TAppleCard.GetFOnMouseDown: TMouseEvent;
begin
  Result := FBackgroundCard.OnMouseDown;
end;

function TAppleCard.GetFOnMouseEnter: TNotifyEvent;
begin
  Result := FBackgroundCard.OnMouseEnter;
end;

function TAppleCard.GetFOnMouseLeave: TNotifyEvent;
begin
  Result := FBackgroundCard.OnMouseLeave;
end;

function TAppleCard.GetFOnMouseMove: TMouseMoveEvent;
begin
  Result := FBackgroundCard.OnMouseMove;
end;

function TAppleCard.GetFOnMouseUp: TMouseEvent;
begin
  Result := FBackgroundCard.OnMouseUp;
end;

function TAppleCard.GetFOnMouseWheel: TMouseWheelEvent;
begin
  Result := FBackgroundCard.OnMouseWheel;
end;

procedure TAppleCard.SetFBackgroudColor(const Value: TAlphaColor);
begin
  FBackgroundCard.Fill.Color := Value;
end;

procedure TAppleCard.SetFCornerRound(const Value: Single);
begin
  FBackgroundCard.XRadius := Value;
  FBackgroundCard.YRadius := Value;
end;

procedure TAppleCard.SetFCorners(const Value: Boolean);
begin
  FCornersActive := Value;
end;

procedure TAppleCard.SetFCursor(const Value: TCursor);
begin
  FBackgroundCard.Cursor := Value;
end;

procedure TAppleCard.SetFElevation(const Value: Boolean);
begin
  FShadow.Enabled := Value;
end;

procedure TAppleCard.SetFElevationColor(const Value: TAlphaColor);
begin
  FShadow.ShadowColor := Value;
end;

procedure TAppleCard.SetFElevationDirection(const Value: Single);
begin
  FShadow.Direction := Value;
end;

procedure TAppleCard.SetFElevationDistance(const Value: Single);
begin
  FShadow.Distance := Value;
end;

procedure TAppleCard.SetFElevationOpacity(const Value: Single);
begin
  FShadow.Opacity := Value;
end;

procedure TAppleCard.SetFElevationSoftness(const Value: Single);
begin
  FShadow.Softness := Value;
end;

procedure TAppleCard.SetFHitTest(const Value: Boolean);
begin
  FBackgroundCard.HitTest := Value;
end;

procedure TAppleCard.SetFOnClick(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnClick := Value;
end;

procedure TAppleCard.SetFOnDblClick(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnDblClick := Value;
end;

procedure TAppleCard.SetFOnKeyDown(const Value: TKeyEvent);
begin
  FBackgroundCard.OnKeyDown := Value;
end;

procedure TAppleCard.SetFOnKeyUp(const Value: TKeyEvent);
begin
  FBackgroundCard.OnKeyUp := Value;
end;

procedure TAppleCard.SetFOnMouseDown(const Value: TMouseEvent);
begin
  FBackgroundCard.OnMouseDown := Value;
end;

procedure TAppleCard.SetFOnMouseEnter(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnMouseEnter := Value;
end;

procedure TAppleCard.SetFOnMouseLeave(const Value: TNotifyEvent);
begin
  FBackgroundCard.OnMouseLeave := Value;
end;

procedure TAppleCard.SetFOnMouseMove(const Value: TMouseMoveEvent);
begin
  FBackgroundCard.OnMouseMove := Value;
end;

procedure TAppleCard.SetFOnMouseUp(const Value: TMouseEvent);
begin
  FBackgroundCard.OnMouseUp := Value;
end;

procedure TAppleCard.SetFOnMouseWheel(const Value: TMouseWheelEvent);
begin
  FBackgroundCard.OnMouseWheel := Value;
end;

end.
